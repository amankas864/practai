class NQueens:
    def __init__(self, N):
        self.N = N
        self.board = [[0] * N for _ in range(N)]

    def is_safe(self, row, col):
        for i in range(col):
            if self.board[row][i] == 1:
                return False

        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if self.board[i][j] == 1:
                return False

        for i, j in zip(range(row, self.N), range(col, -1, -1)):
            if self.board[i][j] == 1:
                return False

        return True

    def solve(self, col):
        if col >= self.N:
            return True

        for i in range(self.N):
            if self.is_safe(i, col):
                self.board[i][col] = 1
                if self.solve(col + 1):
                    return True
                self.board[i][col] = 0

        return False

    def print_solution(self):
        for i in range(self.N):
            for j in range(self.N):
                print(self.board[i][j], end=" ")
            print()

if __name__ == "__main__":
    N = 8  # Change N to desired board size
    n_queens = NQueens(N)
    if n_queens.solve(0):
        print(f"Solution for {N}-Queens Problem:")
        n_queens.print_solution()
    else:
        print("No solution exists for the given board size.")
