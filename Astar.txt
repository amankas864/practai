import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic value (estimated cost from current node to goal)

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def a_star(start_state, goal_state, get_neighbors, heuristic):
    start_node = Node(start_state, None, 0, heuristic(start_state, goal_state))
    open_set = [start_node]
    closed_set = set()

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for neighbor in get_neighbors(current_node.state):
            if neighbor in closed_set:
                continue

            g = current_node.g + 1  # Assuming uniform cost between adjacent states
            h = heuristic(neighbor, goal_state)
            neighbor_node = Node(neighbor, current_node, g, h)

            if neighbor_node not in open_set:
                heapq.heappush(open_set, neighbor_node)
            elif g < neighbor_node.g:
                neighbor_node.g = g
                neighbor_node.parent = current_node

    return None

# Example usage:
def get_neighbors(state):
    x, y = state
    neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]  # Assuming 4-connected grid
    return [neighbor for neighbor in neighbors if 0 <= neighbor[0] <= 4 and 0 <= neighbor[1] <= 4]

def heuristic(state, goal_state):
    x1, y1 = state
    x2, y2 = goal_state
    return abs(x1 - x2) + abs(y1 - y2)  # Manhattan distance heuristic

start_state = (0, 0)
goal_state = (4, 4)
path = a_star(start_state, goal_state, get_neighbors, heuristic)

if path:
    print("Path found:", path)
else:
    print("No path found.")
